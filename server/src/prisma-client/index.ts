// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  car: (where?: CarWhereInput) => Promise<boolean>;
  chat: (where?: ChatWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  car: (where: CarWhereUniqueInput) => Car;
  cars: (
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<CarNode>>;
  carsConnection: (
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarConnection;
  chat: (where: ChatWhereUniqueInput) => Chat;
  chats: (
    args?: {
      where?: ChatWhereInput;
      orderBy?: ChatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<ChatNode>>;
  chatsConnection: (
    args?: {
      where?: ChatWhereInput;
      orderBy?: ChatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ChatConnection;
  post: (where: PostWhereUniqueInput) => Post;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<PostNode>>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<UserNode>>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCar: (data: CarCreateInput) => Car;
  updateCar: (
    args: { data: CarUpdateInput; where: CarWhereUniqueInput }
  ) => Car;
  updateManyCars: (
    args: { data: CarUpdateInput; where?: CarWhereInput }
  ) => BatchPayload;
  upsertCar: (
    args: {
      where: CarWhereUniqueInput;
      create: CarCreateInput;
      update: CarUpdateInput;
    }
  ) => Car;
  deleteCar: (where: CarWhereUniqueInput) => Car;
  deleteManyCars: (where?: CarWhereInput) => BatchPayload;
  createChat: (data: ChatCreateInput) => Chat;
  updateChat: (
    args: { data: ChatUpdateInput; where: ChatWhereUniqueInput }
  ) => Chat;
  updateManyChats: (
    args: { data: ChatUpdateInput; where?: ChatWhereInput }
  ) => BatchPayload;
  upsertChat: (
    args: {
      where: ChatWhereUniqueInput;
      create: ChatCreateInput;
      update: ChatUpdateInput;
    }
  ) => Chat;
  deleteChat: (where: ChatWhereUniqueInput) => Chat;
  deleteManyChats: (where?: ChatWhereInput) => BatchPayload;
  createPost: (data: PostCreateInput) => Post;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => Post;
  updateManyPosts: (
    args: { data: PostUpdateInput; where?: PostWhereInput }
  ) => BatchPayload;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => Post;
  deletePost: (where: PostWhereUniqueInput) => Post;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  car: (
    where?: CarSubscriptionWhereInput
  ) => CarSubscriptionPayloadSubscription;
  chat: (
    where?: ChatSubscriptionWhereInput
  ) => ChatSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "CUSTOMER";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "title_ASC"
  | "title_DESC"
  | "text_ASC"
  | "text_DESC"
  | "nameFile_ASC"
  | "nameFile_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CarOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ChatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "message_ASC"
  | "message_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "emailvalidated_ASC"
  | "emailvalidated_DESC"
  | "validateEmailToken_ASC"
  | "validateEmailToken_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "password_ASC"
  | "password_DESC"
  | "nameFile_ASC"
  | "nameFile_DESC"
  | "resetPasswordToken_ASC"
  | "resetPasswordToken_DESC"
  | "resetPasswordExpires_ASC"
  | "resetPasswordExpires_DESC"
  | "name_ASC"
  | "name_DESC"
  | "role_ASC"
  | "role_DESC";

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ChatUpdateInput {
  message?: String;
  author?: UserUpdateOneInput;
}

export interface CarUpdateDataInput {
  name?: String;
}

export type CarWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarUpdateWithWhereUniqueNestedInput {
  where: CarWhereUniqueInput;
  data: CarUpdateDataInput;
}

export interface UserUpdateInput {
  email?: String;
  emailvalidated?: Boolean;
  validateEmailToken?: String;
  password?: String;
  nameFile?: String;
  resetPasswordToken?: String;
  resetPasswordExpires?: Float;
  name?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  role?: Role;
}

export interface CarUpdateManyInput {
  create?: CarCreateInput[] | CarCreateInput;
  delete?: CarWhereUniqueInput[] | CarWhereUniqueInput;
  connect?: CarWhereUniqueInput[] | CarWhereUniqueInput;
  disconnect?: CarWhereUniqueInput[] | CarWhereUniqueInput;
  update?:
    | CarUpdateWithWhereUniqueNestedInput[]
    | CarUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CarUpsertWithWhereUniqueNestedInput[]
    | CarUpsertWithWhereUniqueNestedInput;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: String;
  emailvalidated?: Boolean;
  validateEmailToken?: String;
  password?: String;
  nameFile?: String;
  resetPasswordToken?: String;
  resetPasswordExpires?: Float;
  name?: String;
  role?: Role;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  validateEmailToken?: String;
  resetPasswordToken?: String;
}>;

export interface UserUpdateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface UserCreateWithoutPostsInput {
  email: String;
  emailvalidated?: Boolean;
  validateEmailToken: String;
  password: String;
  nameFile: String;
  resetPasswordToken: String;
  resetPasswordExpires?: Float;
  name: String;
  role?: Role;
}

export interface PostUpdateWithoutAuthorDataInput {
  isPublished?: Boolean;
  title?: String;
  text?: String;
  nameFile?: String;
  cars?: CarUpdateManyInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  nameFile?: String;
  nameFile_not?: String;
  nameFile_in?: String[] | String;
  nameFile_not_in?: String[] | String;
  nameFile_lt?: String;
  nameFile_lte?: String;
  nameFile_gt?: String;
  nameFile_gte?: String;
  nameFile_contains?: String;
  nameFile_not_contains?: String;
  nameFile_starts_with?: String;
  nameFile_not_starts_with?: String;
  nameFile_ends_with?: String;
  nameFile_not_ends_with?: String;
  author?: UserWhereInput;
  cars_every?: CarWhereInput;
  cars_some?: CarWhereInput;
  cars_none?: CarWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface CarSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarWhereInput;
  AND?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
  OR?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
  NOT?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
}

export interface PostCreateInput {
  isPublished?: Boolean;
  title: String;
  text: String;
  nameFile: String;
  author?: UserCreateOneWithoutPostsInput;
  cars?: CarCreateManyInput;
}

export interface CarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CarWhereInput[] | CarWhereInput;
  OR?: CarWhereInput[] | CarWhereInput;
  NOT?: CarWhereInput[] | CarWhereInput;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface CarCreateInput {
  name: String;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarUpdateInput {
  name?: String;
}

export type ChatWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateDataInput {
  email?: String;
  emailvalidated?: Boolean;
  validateEmailToken?: String;
  password?: String;
  nameFile?: String;
  resetPasswordToken?: String;
  resetPasswordExpires?: Float;
  name?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  role?: Role;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface ChatSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ChatWhereInput;
  AND?: ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput;
  OR?: ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput;
  NOT?: ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput;
}

export interface ChatCreateInput {
  message: String;
  author?: UserCreateOneInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface CarCreateManyInput {
  create?: CarCreateInput[] | CarCreateInput;
  connect?: CarWhereUniqueInput[] | CarWhereUniqueInput;
}

export interface PostCreateWithoutAuthorInput {
  isPublished?: Boolean;
  title: String;
  text: String;
  nameFile: String;
  cars?: CarCreateManyInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface UserCreateInput {
  email: String;
  emailvalidated?: Boolean;
  validateEmailToken: String;
  password: String;
  nameFile: String;
  resetPasswordToken: String;
  resetPasswordExpires?: Float;
  name: String;
  posts?: PostCreateManyWithoutAuthorInput;
  role?: Role;
}

export interface PostUpdateInput {
  isPublished?: Boolean;
  title?: String;
  text?: String;
  nameFile?: String;
  author?: UserUpdateOneWithoutPostsInput;
  cars?: CarUpdateManyInput;
}

export interface CarUpsertWithWhereUniqueNestedInput {
  where: CarWhereUniqueInput;
  update: CarUpdateDataInput;
  create: CarCreateInput;
}

export interface ChatWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  message?: String;
  message_not?: String;
  message_in?: String[] | String;
  message_not_in?: String[] | String;
  message_lt?: String;
  message_lte?: String;
  message_gt?: String;
  message_gte?: String;
  message_contains?: String;
  message_not_contains?: String;
  message_starts_with?: String;
  message_not_starts_with?: String;
  message_ends_with?: String;
  message_not_ends_with?: String;
  author?: UserWhereInput;
  AND?: ChatWhereInput[] | ChatWhereInput;
  OR?: ChatWhereInput[] | ChatWhereInput;
  NOT?: ChatWhereInput[] | ChatWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  emailvalidated?: Boolean;
  emailvalidated_not?: Boolean;
  validateEmailToken?: String;
  validateEmailToken_not?: String;
  validateEmailToken_in?: String[] | String;
  validateEmailToken_not_in?: String[] | String;
  validateEmailToken_lt?: String;
  validateEmailToken_lte?: String;
  validateEmailToken_gt?: String;
  validateEmailToken_gte?: String;
  validateEmailToken_contains?: String;
  validateEmailToken_not_contains?: String;
  validateEmailToken_starts_with?: String;
  validateEmailToken_not_starts_with?: String;
  validateEmailToken_ends_with?: String;
  validateEmailToken_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  nameFile?: String;
  nameFile_not?: String;
  nameFile_in?: String[] | String;
  nameFile_not_in?: String[] | String;
  nameFile_lt?: String;
  nameFile_lte?: String;
  nameFile_gt?: String;
  nameFile_gte?: String;
  nameFile_contains?: String;
  nameFile_not_contains?: String;
  nameFile_starts_with?: String;
  nameFile_not_starts_with?: String;
  nameFile_ends_with?: String;
  nameFile_not_ends_with?: String;
  resetPasswordToken?: String;
  resetPasswordToken_not?: String;
  resetPasswordToken_in?: String[] | String;
  resetPasswordToken_not_in?: String[] | String;
  resetPasswordToken_lt?: String;
  resetPasswordToken_lte?: String;
  resetPasswordToken_gt?: String;
  resetPasswordToken_gte?: String;
  resetPasswordToken_contains?: String;
  resetPasswordToken_not_contains?: String;
  resetPasswordToken_starts_with?: String;
  resetPasswordToken_not_starts_with?: String;
  resetPasswordToken_ends_with?: String;
  resetPasswordToken_not_ends_with?: String;
  resetPasswordExpires?: Float;
  resetPasswordExpires_not?: Float;
  resetPasswordExpires_in?: Float[] | Float;
  resetPasswordExpires_not_in?: Float[] | Float;
  resetPasswordExpires_lt?: Float;
  resetPasswordExpires_lte?: Float;
  resetPasswordExpires_gt?: Float;
  resetPasswordExpires_gte?: Float;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  email: String;
  emailvalidated: Boolean;
  validateEmailToken: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  password: String;
  nameFile: String;
  resetPasswordToken: String;
  resetPasswordExpires?: Float;
  name: String;
  role: Role;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  emailvalidated: () => Promise<Boolean>;
  validateEmailToken: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  password: () => Promise<String>;
  nameFile: () => Promise<String>;
  resetPasswordToken: () => Promise<String>;
  resetPasswordExpires: () => Promise<Float>;
  name: () => Promise<String>;
  role: () => Promise<Role>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  emailvalidated: () => Promise<AsyncIterator<Boolean>>;
  validateEmailToken: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  password: () => Promise<AsyncIterator<String>>;
  nameFile: () => Promise<AsyncIterator<String>>;
  resetPasswordToken: () => Promise<AsyncIterator<String>>;
  resetPasswordExpires: () => Promise<AsyncIterator<Float>>;
  name: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface UserNode {
  id: ID_Output;
  email: String;
  emailvalidated: Boolean;
  validateEmailToken: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  password: String;
  nameFile: String;
  resetPasswordToken: String;
  resetPasswordExpires?: Float;
  name: String;
  role: Role;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  emailvalidated: () => Promise<Boolean>;
  validateEmailToken: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  password: () => Promise<String>;
  nameFile: () => Promise<String>;
  resetPasswordToken: () => Promise<String>;
  resetPasswordExpires: () => Promise<Float>;
  name: () => Promise<String>;
  posts: <T = Promise<Array<PostNode>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  role: () => Promise<Role>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  emailvalidated: () => Promise<AsyncIterator<Boolean>>;
  validateEmailToken: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  password: () => Promise<AsyncIterator<String>>;
  nameFile: () => Promise<AsyncIterator<String>>;
  resetPasswordToken: () => Promise<AsyncIterator<String>>;
  resetPasswordExpires: () => Promise<AsyncIterator<Float>>;
  name: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<Array<PostSubscription>>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface ChatPreviousValuesNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  message: String;
}

export interface ChatPreviousValues
  extends Promise<ChatPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  message: () => Promise<String>;
}

export interface ChatPreviousValuesSubscription
  extends Promise<AsyncIterator<ChatPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  message: () => Promise<AsyncIterator<String>>;
}

export interface CarNode {
  id: ID_Output;
  name: String;
}

export interface Car extends Promise<CarNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CarSubscription
  extends Promise<AsyncIterator<CarNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCarNode {
  count: Int;
}

export interface AggregateCar extends Promise<AggregateCarNode>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarSubscription
  extends Promise<AsyncIterator<AggregateCarNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChatNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  message: String;
}

export interface Chat extends Promise<ChatNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  message: () => Promise<String>;
  author: <T = User>() => T;
}

export interface ChatSubscription
  extends Promise<AsyncIterator<ChatNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  message: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregatePostNode {
  count: Int;
}

export interface AggregatePost
  extends Promise<AggregatePostNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePostNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CarEdgeNode {
  cursor: String;
}

export interface CarEdge extends Promise<CarEdgeNode>, Fragmentable {
  node: <T = Car>() => T;
  cursor: () => Promise<String>;
}

export interface CarEdgeSubscription
  extends Promise<AsyncIterator<CarEdgeNode>>,
    Fragmentable {
  node: <T = CarSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostConnectionNode {}

export interface PostConnection
  extends Promise<PostConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<PostEdgeNode>>>() => T;
  aggregate: <T = AggregatePost>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<PostEdgeSubscription>>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostPreviousValuesNode {
  id: ID_Output;
  isPublished: Boolean;
  title: String;
  text: String;
  nameFile: String;
}

export interface PostPreviousValues
  extends Promise<PostPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  nameFile: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  nameFile: () => Promise<AsyncIterator<String>>;
}

export interface ChatEdgeNode {
  cursor: String;
}

export interface ChatEdge extends Promise<ChatEdgeNode>, Fragmentable {
  node: <T = Chat>() => T;
  cursor: () => Promise<String>;
}

export interface ChatEdgeSubscription
  extends Promise<AsyncIterator<ChatEdgeNode>>,
    Fragmentable {
  node: <T = ChatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PostNode {
  id: ID_Output;
  isPublished: Boolean;
  title: String;
  text: String;
  nameFile: String;
}

export interface Post extends Promise<PostNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  nameFile: () => Promise<String>;
  author: <T = User>() => T;
  cars: <T = Promise<Array<CarNode>>>(
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<PostNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  nameFile: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  cars: <T = Promise<AsyncIterator<Array<CarSubscription>>>>(
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CarConnectionNode {}

export interface CarConnection
  extends Promise<CarConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<CarEdgeNode>>>() => T;
  aggregate: <T = AggregateCar>() => T;
}

export interface CarConnectionSubscription
  extends Promise<AsyncIterator<CarConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<CarEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateCarSubscription>() => T;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostEdgeNode {
  cursor: String;
}

export interface PostEdge extends Promise<PostEdgeNode>, Fragmentable {
  node: <T = Post>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdgeNode>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChatSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ChatSubscriptionPayload
  extends Promise<ChatSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chat>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChatPreviousValues>() => T;
}

export interface ChatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChatSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChatPreviousValuesSubscription>() => T;
}

export interface PostSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PostSubscriptionPayload
  extends Promise<PostSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Post>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValues>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface CarPreviousValuesNode {
  id: ID_Output;
  name: String;
}

export interface CarPreviousValues
  extends Promise<CarPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CarPreviousValuesSubscription
  extends Promise<AsyncIterator<CarPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CarSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CarSubscriptionPayload
  extends Promise<CarSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Car>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarPreviousValues>() => T;
}

export interface CarSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarPreviousValuesSubscription>() => T;
}

export interface AggregateChatNode {
  count: Int;
}

export interface AggregateChat
  extends Promise<AggregateChatNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChatSubscription
  extends Promise<AsyncIterator<AggregateChatNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<UserEdgeNode>>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<UserEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ChatConnectionNode {}

export interface ChatConnection
  extends Promise<ChatConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<ChatEdgeNode>>>() => T;
  aggregate: <T = AggregateChat>() => T;
}

export interface ChatConnectionSubscription
  extends Promise<AsyncIterator<ChatConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<ChatEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateChatSubscription>() => T;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: "https://eu1.prisma.sh/simz-99dd8e/williamimoh/dev"
});
export const prisma = new Prisma();
